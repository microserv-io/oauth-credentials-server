// Code generated by mockery v2.44.1. DO NOT EDIT.

package v1

import (
	context "context"

	provider "github.com/microserv-io/oauth-credentials-server/internal/app/provider"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderService is an autogenerated mock type for the ProviderService type
type MockProviderService struct {
	mock.Mock
}

type MockProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderService) EXPECT() *MockProviderService_Expecter {
	return &MockProviderService_Expecter{mock: &_m.Mock}
}

// CreateProvider provides a mock function with given fields: ctx, input, ownerID
func (_m *MockProviderService) CreateProvider(ctx context.Context, input *provider.CreateInput, ownerID string) (*provider.CreateProviderResponse, error) {
	ret := _m.Called(ctx, input, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvider")
	}

	var r0 *provider.CreateProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *provider.CreateInput, string) (*provider.CreateProviderResponse, error)); ok {
		return rf(ctx, input, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *provider.CreateInput, string) *provider.CreateProviderResponse); ok {
		r0 = rf(ctx, input, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.CreateProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *provider.CreateInput, string) error); ok {
		r1 = rf(ctx, input, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_CreateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProvider'
type MockProviderService_CreateProvider_Call struct {
	*mock.Call
}

// CreateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - input *provider.CreateInput
//   - ownerID string
func (_e *MockProviderService_Expecter) CreateProvider(ctx interface{}, input interface{}, ownerID interface{}) *MockProviderService_CreateProvider_Call {
	return &MockProviderService_CreateProvider_Call{Call: _e.mock.On("CreateProvider", ctx, input, ownerID)}
}

func (_c *MockProviderService_CreateProvider_Call) Run(run func(ctx context.Context, input *provider.CreateInput, ownerID string)) *MockProviderService_CreateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*provider.CreateInput), args[2].(string))
	})
	return _c
}

func (_c *MockProviderService_CreateProvider_Call) Return(_a0 *provider.CreateProviderResponse, _a1 error) *MockProviderService_CreateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_CreateProvider_Call) RunAndReturn(run func(context.Context, *provider.CreateInput, string) (*provider.CreateProviderResponse, error)) *MockProviderService_CreateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvider provides a mock function with given fields: ctx, id
func (_m *MockProviderService) DeleteProvider(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProviderService_DeleteProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvider'
type MockProviderService_DeleteProvider_Call struct {
	*mock.Call
}

// DeleteProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockProviderService_Expecter) DeleteProvider(ctx interface{}, id interface{}) *MockProviderService_DeleteProvider_Call {
	return &MockProviderService_DeleteProvider_Call{Call: _e.mock.On("DeleteProvider", ctx, id)}
}

func (_c *MockProviderService_DeleteProvider_Call) Run(run func(ctx context.Context, id string)) *MockProviderService_DeleteProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderService_DeleteProvider_Call) Return(_a0 error) *MockProviderService_DeleteProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProviderService_DeleteProvider_Call) RunAndReturn(run func(context.Context, string) error) *MockProviderService_DeleteProvider_Call {
	_c.Call.Return(run)
	return _c
}

// ListProviders provides a mock function with given fields: ctx
func (_m *MockProviderService) ListProviders(ctx context.Context) (*provider.ListProvidersResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProviders")
	}

	var r0 *provider.ListProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*provider.ListProvidersResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *provider.ListProvidersResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ListProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_ListProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProviders'
type MockProviderService_ListProviders_Call struct {
	*mock.Call
}

// ListProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProviderService_Expecter) ListProviders(ctx interface{}) *MockProviderService_ListProviders_Call {
	return &MockProviderService_ListProviders_Call{Call: _e.mock.On("ListProviders", ctx)}
}

func (_c *MockProviderService_ListProviders_Call) Run(run func(ctx context.Context)) *MockProviderService_ListProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProviderService_ListProviders_Call) Return(_a0 *provider.ListProvidersResponse, _a1 error) *MockProviderService_ListProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_ListProviders_Call) RunAndReturn(run func(context.Context) (*provider.ListProvidersResponse, error)) *MockProviderService_ListProviders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProvider provides a mock function with given fields: ctx, name, input
func (_m *MockProviderService) UpdateProvider(ctx context.Context, name string, input *provider.UpdateInput) (*provider.UpdateProviderResponse, error) {
	ret := _m.Called(ctx, name, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvider")
	}

	var r0 *provider.UpdateProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *provider.UpdateInput) (*provider.UpdateProviderResponse, error)); ok {
		return rf(ctx, name, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *provider.UpdateInput) *provider.UpdateProviderResponse); ok {
		r0 = rf(ctx, name, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.UpdateProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *provider.UpdateInput) error); ok {
		r1 = rf(ctx, name, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderService_UpdateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProvider'
type MockProviderService_UpdateProvider_Call struct {
	*mock.Call
}

// UpdateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - input *provider.UpdateInput
func (_e *MockProviderService_Expecter) UpdateProvider(ctx interface{}, name interface{}, input interface{}) *MockProviderService_UpdateProvider_Call {
	return &MockProviderService_UpdateProvider_Call{Call: _e.mock.On("UpdateProvider", ctx, name, input)}
}

func (_c *MockProviderService_UpdateProvider_Call) Run(run func(ctx context.Context, name string, input *provider.UpdateInput)) *MockProviderService_UpdateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*provider.UpdateInput))
	})
	return _c
}

func (_c *MockProviderService_UpdateProvider_Call) Return(_a0 *provider.UpdateProviderResponse, _a1 error) *MockProviderService_UpdateProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderService_UpdateProvider_Call) RunAndReturn(run func(context.Context, string, *provider.UpdateInput) (*provider.UpdateProviderResponse, error)) *MockProviderService_UpdateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderService creates a new instance of MockProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderService {
	mock := &MockProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
