// Code generated by mockery v2.44.1. DO NOT EDIT.

package oauthservice

import (
	context "context"

	oauthapp "github.com/microserv-io/oauth-credentials-server/internal/app/oauthapp"
	mock "github.com/stretchr/testify/mock"
)

// MockOAuthAppService is an autogenerated mock type for the OAuthAppService type
type MockOAuthAppService struct {
	mock.Mock
}

type MockOAuthAppService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthAppService) EXPECT() *MockOAuthAppService_Expecter {
	return &MockOAuthAppService_Expecter{mock: &_m.Mock}
}

// GetOAuthForProviderAndOwner provides a mock function with given fields: ctx, providerID, ownerID
func (_m *MockOAuthAppService) GetOAuthForProviderAndOwner(ctx context.Context, providerID string, ownerID string) (*oauthapp.GetOAuthForProviderAndOwnerResponse, error) {
	ret := _m.Called(ctx, providerID, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthForProviderAndOwner")
	}

	var r0 *oauthapp.GetOAuthForProviderAndOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*oauthapp.GetOAuthForProviderAndOwnerResponse, error)); ok {
		return rf(ctx, providerID, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *oauthapp.GetOAuthForProviderAndOwnerResponse); ok {
		r0 = rf(ctx, providerID, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauthapp.GetOAuthForProviderAndOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAppService_GetOAuthForProviderAndOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthForProviderAndOwner'
type MockOAuthAppService_GetOAuthForProviderAndOwner_Call struct {
	*mock.Call
}

// GetOAuthForProviderAndOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - ownerID string
func (_e *MockOAuthAppService_Expecter) GetOAuthForProviderAndOwner(ctx interface{}, providerID interface{}, ownerID interface{}) *MockOAuthAppService_GetOAuthForProviderAndOwner_Call {
	return &MockOAuthAppService_GetOAuthForProviderAndOwner_Call{Call: _e.mock.On("GetOAuthForProviderAndOwner", ctx, providerID, ownerID)}
}

func (_c *MockOAuthAppService_GetOAuthForProviderAndOwner_Call) Run(run func(ctx context.Context, providerID string, ownerID string)) *MockOAuthAppService_GetOAuthForProviderAndOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOAuthAppService_GetOAuthForProviderAndOwner_Call) Return(_a0 *oauthapp.GetOAuthForProviderAndOwnerResponse, _a1 error) *MockOAuthAppService_GetOAuthForProviderAndOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAppService_GetOAuthForProviderAndOwner_Call) RunAndReturn(run func(context.Context, string, string) (*oauthapp.GetOAuthForProviderAndOwnerResponse, error)) *MockOAuthAppService_GetOAuthForProviderAndOwner_Call {
	_c.Call.Return(run)
	return _c
}

// ListOAuthAppsForOwner provides a mock function with given fields: ctx, ownerID
func (_m *MockOAuthAppService) ListOAuthAppsForOwner(ctx context.Context, ownerID string) (*oauthapp.ListOAuthAppsForOwnerResponse, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for ListOAuthAppsForOwner")
	}

	var r0 *oauthapp.ListOAuthAppsForOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oauthapp.ListOAuthAppsForOwnerResponse, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauthapp.ListOAuthAppsForOwnerResponse); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauthapp.ListOAuthAppsForOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAppService_ListOAuthAppsForOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOAuthAppsForOwner'
type MockOAuthAppService_ListOAuthAppsForOwner_Call struct {
	*mock.Call
}

// ListOAuthAppsForOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID string
func (_e *MockOAuthAppService_Expecter) ListOAuthAppsForOwner(ctx interface{}, ownerID interface{}) *MockOAuthAppService_ListOAuthAppsForOwner_Call {
	return &MockOAuthAppService_ListOAuthAppsForOwner_Call{Call: _e.mock.On("ListOAuthAppsForOwner", ctx, ownerID)}
}

func (_c *MockOAuthAppService_ListOAuthAppsForOwner_Call) Run(run func(ctx context.Context, ownerID string)) *MockOAuthAppService_ListOAuthAppsForOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthAppService_ListOAuthAppsForOwner_Call) Return(_a0 *oauthapp.ListOAuthAppsForOwnerResponse, _a1 error) *MockOAuthAppService_ListOAuthAppsForOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAppService_ListOAuthAppsForOwner_Call) RunAndReturn(run func(context.Context, string) (*oauthapp.ListOAuthAppsForOwnerResponse, error)) *MockOAuthAppService_ListOAuthAppsForOwner_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAccessToken provides a mock function with given fields: ctx, providerID, ownerID
func (_m *MockOAuthAppService) RetrieveAccessToken(ctx context.Context, providerID string, ownerID string) (*oauthapp.RetrieveAccessTokenResponse, error) {
	ret := _m.Called(ctx, providerID, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAccessToken")
	}

	var r0 *oauthapp.RetrieveAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*oauthapp.RetrieveAccessTokenResponse, error)); ok {
		return rf(ctx, providerID, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *oauthapp.RetrieveAccessTokenResponse); ok {
		r0 = rf(ctx, providerID, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauthapp.RetrieveAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, providerID, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAppService_RetrieveAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAccessToken'
type MockOAuthAppService_RetrieveAccessToken_Call struct {
	*mock.Call
}

// RetrieveAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID string
//   - ownerID string
func (_e *MockOAuthAppService_Expecter) RetrieveAccessToken(ctx interface{}, providerID interface{}, ownerID interface{}) *MockOAuthAppService_RetrieveAccessToken_Call {
	return &MockOAuthAppService_RetrieveAccessToken_Call{Call: _e.mock.On("RetrieveAccessToken", ctx, providerID, ownerID)}
}

func (_c *MockOAuthAppService_RetrieveAccessToken_Call) Run(run func(ctx context.Context, providerID string, ownerID string)) *MockOAuthAppService_RetrieveAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOAuthAppService_RetrieveAccessToken_Call) Return(_a0 *oauthapp.RetrieveAccessTokenResponse, _a1 error) *MockOAuthAppService_RetrieveAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAppService_RetrieveAccessToken_Call) RunAndReturn(run func(context.Context, string, string) (*oauthapp.RetrieveAccessTokenResponse, error)) *MockOAuthAppService_RetrieveAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthAppService creates a new instance of MockOAuthAppService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthAppService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthAppService {
	mock := &MockOAuthAppService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
