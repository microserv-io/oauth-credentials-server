// Code generated by mockery v2.44.1. DO NOT EDIT.

package oauthapp

import (
	context "context"

	modelsoauthapp "github.com/microserv-io/oauth-credentials-server/internal/domain/models/oauthapp"
	mock "github.com/stretchr/testify/mock"
)

// MockOAuthAppRepository is an autogenerated mock type for the OAuthAppRepository type
type MockOAuthAppRepository struct {
	mock.Mock
}

type MockOAuthAppRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOAuthAppRepository) EXPECT() *MockOAuthAppRepository_Expecter {
	return &MockOAuthAppRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, ownerID, providerID
func (_m *MockOAuthAppRepository) Find(ctx context.Context, ownerID string, providerID string) (*modelsoauthapp.OAuthApp, error) {
	ret := _m.Called(ctx, ownerID, providerID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *modelsoauthapp.OAuthApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*modelsoauthapp.OAuthApp, error)); ok {
		return rf(ctx, ownerID, providerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *modelsoauthapp.OAuthApp); ok {
		r0 = rf(ctx, ownerID, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modelsoauthapp.OAuthApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ownerID, providerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAppRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockOAuthAppRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID string
//   - providerID string
func (_e *MockOAuthAppRepository_Expecter) Find(ctx interface{}, ownerID interface{}, providerID interface{}) *MockOAuthAppRepository_Find_Call {
	return &MockOAuthAppRepository_Find_Call{Call: _e.mock.On("Find", ctx, ownerID, providerID)}
}

func (_c *MockOAuthAppRepository_Find_Call) Run(run func(ctx context.Context, ownerID string, providerID string)) *MockOAuthAppRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOAuthAppRepository_Find_Call) Return(_a0 *modelsoauthapp.OAuthApp, _a1 error) *MockOAuthAppRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAppRepository_Find_Call) RunAndReturn(run func(context.Context, string, string) (*modelsoauthapp.OAuthApp, error)) *MockOAuthAppRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// ListForOwner provides a mock function with given fields: ctx, ownerID
func (_m *MockOAuthAppRepository) ListForOwner(ctx context.Context, ownerID string) ([]*modelsoauthapp.OAuthApp, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for ListForOwner")
	}

	var r0 []*modelsoauthapp.OAuthApp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*modelsoauthapp.OAuthApp, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*modelsoauthapp.OAuthApp); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelsoauthapp.OAuthApp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOAuthAppRepository_ListForOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListForOwner'
type MockOAuthAppRepository_ListForOwner_Call struct {
	*mock.Call
}

// ListForOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - ownerID string
func (_e *MockOAuthAppRepository_Expecter) ListForOwner(ctx interface{}, ownerID interface{}) *MockOAuthAppRepository_ListForOwner_Call {
	return &MockOAuthAppRepository_ListForOwner_Call{Call: _e.mock.On("ListForOwner", ctx, ownerID)}
}

func (_c *MockOAuthAppRepository_ListForOwner_Call) Run(run func(ctx context.Context, ownerID string)) *MockOAuthAppRepository_ListForOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOAuthAppRepository_ListForOwner_Call) Return(_a0 []*modelsoauthapp.OAuthApp, _a1 error) *MockOAuthAppRepository_ListForOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOAuthAppRepository_ListForOwner_Call) RunAndReturn(run func(context.Context, string) ([]*modelsoauthapp.OAuthApp, error)) *MockOAuthAppRepository_ListForOwner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, id, updateFunc
func (_m *MockOAuthAppRepository) UpdateByID(ctx context.Context, id string, updateFunc func(*modelsoauthapp.OAuthApp) error) error {
	ret := _m.Called(ctx, id, updateFunc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(*modelsoauthapp.OAuthApp) error) error); ok {
		r0 = rf(ctx, id, updateFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOAuthAppRepository_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockOAuthAppRepository_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - updateFunc func(*modelsoauthapp.OAuthApp) error
func (_e *MockOAuthAppRepository_Expecter) UpdateByID(ctx interface{}, id interface{}, updateFunc interface{}) *MockOAuthAppRepository_UpdateByID_Call {
	return &MockOAuthAppRepository_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, id, updateFunc)}
}

func (_c *MockOAuthAppRepository_UpdateByID_Call) Run(run func(ctx context.Context, id string, updateFunc func(*modelsoauthapp.OAuthApp) error)) *MockOAuthAppRepository_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(func(*modelsoauthapp.OAuthApp) error))
	})
	return _c
}

func (_c *MockOAuthAppRepository_UpdateByID_Call) Return(_a0 error) *MockOAuthAppRepository_UpdateByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOAuthAppRepository_UpdateByID_Call) RunAndReturn(run func(context.Context, string, func(*modelsoauthapp.OAuthApp) error) error) *MockOAuthAppRepository_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOAuthAppRepository creates a new instance of MockOAuthAppRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOAuthAppRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOAuthAppRepository {
	mock := &MockOAuthAppRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
