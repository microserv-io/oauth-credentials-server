// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	provider "github.com/microserv-io/oauth-credentials-server/internal/domain/models/provider"
	mock "github.com/stretchr/testify/mock"
)

// MockProviderRepository is an autogenerated mock type for the ProviderRepository type
type MockProviderRepository struct {
	mock.Mock
}

type MockProviderRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProviderRepository) EXPECT() *MockProviderRepository_Expecter {
	return &MockProviderRepository_Expecter{mock: &_m.Mock}
}

// FindByName provides a mock function with given fields: ctx, name
func (_m *MockProviderRepository) FindByName(ctx context.Context, name string) (*provider.Provider, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *provider.Provider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*provider.Provider, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *provider.Provider); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.Provider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProviderRepository_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type MockProviderRepository_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProviderRepository_Expecter) FindByName(ctx interface{}, name interface{}) *MockProviderRepository_FindByName_Call {
	return &MockProviderRepository_FindByName_Call{Call: _e.mock.On("FindByName", ctx, name)}
}

func (_c *MockProviderRepository_FindByName_Call) Run(run func(ctx context.Context, name string)) *MockProviderRepository_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProviderRepository_FindByName_Call) Return(_a0 *provider.Provider, _a1 error) *MockProviderRepository_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProviderRepository_FindByName_Call) RunAndReturn(run func(context.Context, string) (*provider.Provider, error)) *MockProviderRepository_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProviderRepository creates a new instance of MockProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProviderRepository {
	mock := &MockProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
