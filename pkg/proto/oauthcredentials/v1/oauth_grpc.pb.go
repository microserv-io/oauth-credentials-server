// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: oauthcredentials/v1/oauth.proto

package oauthcredentials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OAuthServiceClient is the client API for OAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthServiceClient interface {
	ListOAuthsForOwner(ctx context.Context, in *ListOAuthsForOwnerRequest, opts ...grpc.CallOption) (*ListOAuthsForOwnerResponse, error)
	GetOAuthByID(ctx context.Context, in *GetOAuthByIDRequest, opts ...grpc.CallOption) (*GetOAuthByIDResponse, error)
	GetOAuthByProvider(ctx context.Context, in *GetOAuthByProviderRequest, opts ...grpc.CallOption) (*GetOAuthByProviderResponse, error)
	GetOAuthCredentialByProvider(ctx context.Context, in *GetOAuthCredentialByProviderRequest, opts ...grpc.CallOption) (*GetOAuthCredentialByProviderResponse, error)
}

type oAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthServiceClient(cc grpc.ClientConnInterface) OAuthServiceClient {
	return &oAuthServiceClient{cc}
}

func (c *oAuthServiceClient) ListOAuthsForOwner(ctx context.Context, in *ListOAuthsForOwnerRequest, opts ...grpc.CallOption) (*ListOAuthsForOwnerResponse, error) {
	out := new(ListOAuthsForOwnerResponse)
	err := c.cc.Invoke(ctx, "/oauthcredentials.v1.OAuthService/ListOAuthsForOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetOAuthByID(ctx context.Context, in *GetOAuthByIDRequest, opts ...grpc.CallOption) (*GetOAuthByIDResponse, error) {
	out := new(GetOAuthByIDResponse)
	err := c.cc.Invoke(ctx, "/oauthcredentials.v1.OAuthService/GetOAuthByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetOAuthByProvider(ctx context.Context, in *GetOAuthByProviderRequest, opts ...grpc.CallOption) (*GetOAuthByProviderResponse, error) {
	out := new(GetOAuthByProviderResponse)
	err := c.cc.Invoke(ctx, "/oauthcredentials.v1.OAuthService/GetOAuthByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthServiceClient) GetOAuthCredentialByProvider(ctx context.Context, in *GetOAuthCredentialByProviderRequest, opts ...grpc.CallOption) (*GetOAuthCredentialByProviderResponse, error) {
	out := new(GetOAuthCredentialByProviderResponse)
	err := c.cc.Invoke(ctx, "/oauthcredentials.v1.OAuthService/GetOAuthCredentialByProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthServiceServer is the server API for OAuthService service.
// All implementations must embed UnimplementedOAuthServiceServer
// for forward compatibility
type OAuthServiceServer interface {
	ListOAuthsForOwner(context.Context, *ListOAuthsForOwnerRequest) (*ListOAuthsForOwnerResponse, error)
	GetOAuthByID(context.Context, *GetOAuthByIDRequest) (*GetOAuthByIDResponse, error)
	GetOAuthByProvider(context.Context, *GetOAuthByProviderRequest) (*GetOAuthByProviderResponse, error)
	GetOAuthCredentialByProvider(context.Context, *GetOAuthCredentialByProviderRequest) (*GetOAuthCredentialByProviderResponse, error)
	mustEmbedUnimplementedOAuthServiceServer()
}

// UnimplementedOAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthServiceServer struct {
}

func (UnimplementedOAuthServiceServer) ListOAuthsForOwner(context.Context, *ListOAuthsForOwnerRequest) (*ListOAuthsForOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOAuthsForOwner not implemented")
}
func (UnimplementedOAuthServiceServer) GetOAuthByID(context.Context, *GetOAuthByIDRequest) (*GetOAuthByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthByID not implemented")
}
func (UnimplementedOAuthServiceServer) GetOAuthByProvider(context.Context, *GetOAuthByProviderRequest) (*GetOAuthByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthByProvider not implemented")
}
func (UnimplementedOAuthServiceServer) GetOAuthCredentialByProvider(context.Context, *GetOAuthCredentialByProviderRequest) (*GetOAuthCredentialByProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthCredentialByProvider not implemented")
}
func (UnimplementedOAuthServiceServer) mustEmbedUnimplementedOAuthServiceServer() {}

// UnsafeOAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthServiceServer will
// result in compilation errors.
type UnsafeOAuthServiceServer interface {
	mustEmbedUnimplementedOAuthServiceServer()
}

func RegisterOAuthServiceServer(s grpc.ServiceRegistrar, srv OAuthServiceServer) {
	s.RegisterService(&OAuthService_ServiceDesc, srv)
}

func _OAuthService_ListOAuthsForOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthsForOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).ListOAuthsForOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthcredentials.v1.OAuthService/ListOAuthsForOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).ListOAuthsForOwner(ctx, req.(*ListOAuthsForOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetOAuthByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetOAuthByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthcredentials.v1.OAuthService/GetOAuthByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetOAuthByID(ctx, req.(*GetOAuthByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetOAuthByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthByProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetOAuthByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthcredentials.v1.OAuthService/GetOAuthByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetOAuthByProvider(ctx, req.(*GetOAuthByProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthService_GetOAuthCredentialByProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthCredentialByProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthServiceServer).GetOAuthCredentialByProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthcredentials.v1.OAuthService/GetOAuthCredentialByProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthServiceServer).GetOAuthCredentialByProvider(ctx, req.(*GetOAuthCredentialByProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthService_ServiceDesc is the grpc.ServiceDesc for OAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oauthcredentials.v1.OAuthService",
	HandlerType: (*OAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOAuthsForOwner",
			Handler:    _OAuthService_ListOAuthsForOwner_Handler,
		},
		{
			MethodName: "GetOAuthByID",
			Handler:    _OAuthService_GetOAuthByID_Handler,
		},
		{
			MethodName: "GetOAuthByProvider",
			Handler:    _OAuthService_GetOAuthByProvider_Handler,
		},
		{
			MethodName: "GetOAuthCredentialByProvider",
			Handler:    _OAuthService_GetOAuthCredentialByProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauthcredentials/v1/oauth.proto",
}
