syntax = "proto3";

option go_package = "github.com/microserv-io/oauth/pkg/grpc/v1/grpcoauthv1";

package grpcoauthv1;

import "google/protobuf/empty.proto";

service OAuthService {
  rpc ListOAuths(ListOAuthsRequest) returns (stream OAuth) {}
  rpc GetOAuthByID(GetOAuthByIDRequest) returns (OAuth) {}
  rpc GetOAuthByProvider(GetOAuthByProviderRequest) returns (OAuth) {}
  rpc GetOAuthCredentialsByProvider(GetOAuthByProviderRequest) returns (OAuthCredential) {}
}

service OAuthProviderService {
  rpc ListProviders(google.protobuf.Empty) returns (stream OAuthProvider) {}
  rpc CreateProvider(CreateProviderRequest) returns (OAuthProvider) {}
  rpc UpdateProvider(UpdateProviderRequest) returns (OAuthProvider) {}
  rpc DeleteProvider(DeleteProviderRequest) returns (google.protobuf.Empty) {}
}


message CreateProviderRequest {
  string name = 1;
  string clientID = 2;
  string clientSecret = 3;
  string redirectURI = 4;
  string scopes = 5;
  string authURL = 6;
  string tokenURL = 7;
}

message UpdateProviderRequest {
  string id = 1;
  string name = 2;
  string clientID = 3;
  string clientSecret = 4;
  string redirectURI = 5;
  string scopes = 6;
  string authURL = 7;
  string tokenURL = 8;
}

message DeleteProviderRequest {
  string id = 1;
}

message OAuthProvider {
  string id = 1;
  string name = 2;
  string clientID = 3;
  string clientSecret = 4;
  string redirectURI = 5;
  string scopes = 6;
  string authURL = 7;
  string tokenURL = 8;
}

message OAuth {
  string id = 1;
  string owner = 2;
  string provider = 3;
  repeated string scopes = 6;
}

message OAuthCredential {
  string accessToken = 1;
}

message ListOAuthsRequest {
  string owner = 1;
}

message GetOAuthByIDRequest {
  string owner = 1;
  string id = 2;
}

message GetOAuthByProviderRequest {
  string owner = 1;
  string provider = 2;
}

message OAuthTokenRequest {
  string owner = 1;
  string provider = 2;
  string code = 3;
  string redirectURI = 4;
}



